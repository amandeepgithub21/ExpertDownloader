package com.example.expertdownloader;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import androidx.fragment.app.Fragment;
import android.os.Environment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.MediaController;
import android.widget.SeekBar;
import android.widget.Toast;
import android.widget.VideoView;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;

public class VideoFragment extends Fragment {

    Button b2;
    EditText e1;
    String videolink;
    VideoView videoView;
    SeekBar seekBar;
    public VideoFragment() {
        // Required empty public constructor
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.fragment_video, container, false);
        b2 = view.findViewById(R.id.button2);
        e1 = view.findViewById(R.id.editvideolink);
        videoView = view.findViewById(R.id.videoView);
        seekBar = view.findViewById(R.id.seekBar2);
        b2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                videolink = e1.getText().toString();
                new Downloadvideo().execute(videolink);
            }
        });

        return view;
    }

    private class Downloadvideo extends AsyncTask<String, Integer, String> {

        @Override
        protected String doInBackground(String... params) {
            String apiUrl = params[0];
            try {
                URL url = new URL(apiUrl);
                HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();

                try {
                    InputStream in = new BufferedInputStream(urlConnection.getInputStream());

                    // Convert InputStream to String or save the data as needed
                    return savevideo(in);

                } finally {
                    urlConnection.disconnect();
                }
            } catch (IOException e) {
                Log.e("HTTP", "Error downloading video", e);
                return null;
            }
        }
        @Override
        protected void onProgressUpdate(Integer... values) {
            super.onProgressUpdate(values);
            if (values[0] == -1) {
                Toast.makeText(getContext(), "Something went wrong during download", Toast.LENGTH_LONG).show();
            } else {
                seekBar.setMax(values[0]);
                seekBar.setProgress(values[1]);
            }
        }
        @Override
        protected void onPostExecute(String filepath) {
            super.onPostExecute(filepath);
            if (filepath != null) {
                Toast.makeText(getContext(), "Download complete", Toast.LENGTH_SHORT).show();

                    videoView.setVideoURI(Uri.parse(filepath));
                    MediaController mediaController =new MediaController(getContext());
                    mediaController.setAnchorView(videoView);
                    videoView.setMediaController(mediaController);
                    videoView.requestFocus();
            }
        }

        private String savevideo(InputStream inputStream) {
            String filename = filenameset(videolink);
            File file = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), filename);

            try {
                FileOutputStream outputStream = new FileOutputStream(file);
                byte[] buffer = new byte[4096]; // Adjust the buffer size as needed
                int bytesRead;

                while ((bytesRead = inputStream.read(buffer)) != -1) {
                    outputStream.write(buffer, 0, bytesRead);
                }

                outputStream.close();
                inputStream.close();

                Toast.makeText(getContext(), "Video downloaded", Toast.LENGTH_LONG).show();

                return file.getAbsolutePath();
            } catch (IOException e) {
                Log.e("File", "Error saving to file", e);
                return null;
            }
        }
    }

    private void displayVideo(String filePath) {
        // Play the downloaded video using VideoView
        MediaController mediaController = new MediaController(getContext());
        mediaController.setAnchorView(videoView);
        videoView.setMediaController(mediaController);
        videoView.setVideoURI(Uri.parse(filePath));
        videoView.start();
    }

    private String filenameset(String fname) {
        try {
            URL parseurl = new URL(fname);
            String path = parseurl.getPath();
            String decodefilename= URLDecoder.decode(path.substring(path.lastIndexOf('/')+1), StandardCharsets.UTF_8.name());
            return decodefilename;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
